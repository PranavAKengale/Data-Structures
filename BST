# Closest Binary Search Tree Value
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        
    def findClosestValueInBst(self,target):
            return self.findClosestValueInBstHelper(target, float("inf"))
        
    def findClosestValueInBstHelper(self, target, closet):
        currentNode=self
        while currentNode is not None:
            if abs(closet-target)> abs(target-currentNode.value):
                closet=currentNode.value
            if target<currentNode.value:
                currentNode=currentNode.left
            elif target>currentNode.value:
                currentNode=currentNode.right

            else:
                return closet
        return closet
        
#Testing:
root = BST(10)
root.left = BST(5)
root.left.left = BST(2)
root.left.left.left = BST(1)
root.left.right = BST(5)
root.right = BST(15)
root.right.left = BST(13)
root.right.left.right = BST(14)
root.right.right = BST(22)

root.findClosestValueInBst(12)

------------------

# BST Construction
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        
        
    def insert(self,value):
        currentNode=self
        while True:
            if value<=currentNode.value:
                if currentNode.left is None:
                    currentNode.left=BST(value)
                    break
                else:
                    currentNode=currentNode.left
            elif value>=currentNode.value:
                if currentNode.right is None:
                    currentNode.right=BST(value)
                    break
                else:
                    currentNode=currentNode.right
        return self
    
    def contains(self,value):
        currentNode=self
        while currentNode is not None:
            if value<currentNode.value:
                currentNode=currentNode.left
            elif value>currentNode.value:
                currentNode=currentNode.right
            else:
                return True   
        return False
    
    def remove(self,value,parentNode=None):
        currentNode=self
        if currentNode is None:
            return None
        while currentNode is not None:
            if value<currentNode.value:
                parentNode=currentNode
                currentNode=currentNode.left
            elif value>currentNode.value:
                parentNode=currentNode
                currentNode=currentNode.right
            else:
                if currentNode.left is not None and currentNode.right is not None:
                    currentNode.value=currentNode.right.getMinValue()
                    currentNode.right.remove(currentNode.value,currentNode)
                elif parentNode is None:
                    if currentNode.left is not None:
                        currentNode.value=currentNode.left.value
                        currentNode.right=currentNode.left.right
                        currentNode.left=currentNode.left.left
                    elif currentNode.right is not None:
                        currentNode.value= currentNode.right.value
                        currentNode.right=currentNode.right.right
                        currentNode.left=currentNode.right.left
                    else:
                        pass
                elif parentNode.left==currentNode:
                    parentNode.left=currentNode.left if currentNode.left is not None else currentNode.right
                elif parentNode.right==currentNode:
                    parentNode.right=currentNode.left if currentNode.left is not None else currentNode.right
                break
        return self
    
    def getMinValue(self):
        currentNode=self
        while currentNode.left is not None:
            currentNode=currentNode.left
        return currentNode.value
        
 -------------------------
 # Min Height BST
 class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        if value < self.value:
            if self.left is None:
                self.left = BST(value)
            else:
                self.left.insert(value)
        else:
            if self.right is None:
                self.right = BST(value)
            else:
                self.right.insert(value)
                
def minHeightBst(array):
    return constructBST(array,None,0,len(array)-1)

def constructBST(array,bst,startIdx,endIdx):
    if endIdx<startIdx:
        return
    middleIdx=(startIdx+endIdx) // 2
    valueToAdd=array[middleIdx]
    if bst is None:
        bst=BST(valueToAdd)
    else:
        bst.insert(valueToAdd)
    constructBST(array,bst,startIdx,middleIdx-1)
    constructBST(array,bst,middleIdx+1,endIdx)
    return bst
    
 # 2nd Approach:
 class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def minHeight(array):
    return constructNewBst(array,0,len(array)-1)

def constructNewBst(array,startIdx,endIdx):
    if endIdx<startIdx:
        return
    middleIdx=(startIdx+endIdx) //2
    bst=BST(array[middleIdx])
    bst.left=constructNewBst(array,startIdx,middleIdx-1)
    bst.right=constructNewBst(array,middleIdx+1,endIdx)
    return bst
--------------------------------

# Find kth largest element
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
    
    @staticmethod
    def kLargestElemet(tree,k):
        if tree is None:
            return None
        array=[]
        BST.kLargest(tree,array,k)
        return array[len(array)-k]
     
    @staticmethod
    def kLargest(tree,array,k):
        if tree==None:
            return
        BST.kLargest(tree.left,array,k)
        array.append(tree.value)
        BST.kLargest(tree.right,array,k)
        
 ---------------------------------    
