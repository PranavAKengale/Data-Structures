# Closest Binary Search Tree Value
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
        
    def findClosestValueInBst(self,target):
            return self.findClosestValueInBstHelper(target, float("inf"))
        
    def findClosestValueInBstHelper(self, target, closet):
        currentNode=self
        while currentNode is not None:
            if abs(closet-target)> abs(target-currentNode.value):
                closet=currentNode.value
            if target<currentNode.value:
                currentNode=currentNode.left
            elif target>currentNode.value:
                currentNode=currentNode.right

            else:
                return closet
        return closet
# Testing:
root = BST(10)
root.left = BST(5)
root.left.left = BST(2)
root.left.left.left = BST(1)
root.left.right = BST(5)
root.right = BST(15)
root.right.left = BST(13)
root.right.left.right = BST(14)
root.right.right = BST(22)

root.findClosestValueInBst(12)

--------------
