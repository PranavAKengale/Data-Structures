# Two Sum
# Normal Approach
def twoSum1(array,target):
        for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j]==target:
                    return [i,j]
        return []  
        
# Optimized
def twoSum1(array,target):
    array.sort()
    left=0
    right=len(array)-1
    while left<right:
        currentSum=array[left]+array[right]
        if currentSum==target:
            return [left,right]
        elif currentSum<target:
            left+=1
        elif currentSum>target:
            right-=1
    return []
    
# 3rd approach (Hash Table)
def TwoSum1(nums,target):
    array={}
    for num in nums:
        if target-num in array:
            match=target-num
            return nums.index(match),nums.index(num)
        else:
            array[num]=True
    return []
-------------------------------------------------------

# Validate Subsequence
def validSeq(array,seq):
    i=0
    j=0
    while i<len(seq) and j<len(array):
        if seq[i]==array[j]:
            i+=1
        j+=1
    return True if i==len(seq) else False
--------------------------------------------------------

# Sorted Square Error
def square(array):
    num=[]
    l,r=0,len(array)-1
    while l<=r:
        if array[l]*array[l]>array[r]*array[r]:
            num.append(array[l]*array[l])
            l+=1
        else:
            num.append(array[r]*array[r])
            r-=1
    return num[::-1]
----------------------------------------------------------

# Tournament Winner
Home_team_won=1
def tournamentWinner(competitions,results):
    currentBestTeam=""
    scores={currentBestTeam :0}
    
    for idx,competition in enumerate(competitions):
        result=results[idx]
        hometeam, awayteam=competition
        
        winningTeam = hometeam if result==Home_team_won else awayteam
        
        updateScores(winningTeam,3,scores)
        if scores[winningTeam]>scores[currentBestTeam]:
            currentBestTeam=winningTeam
            
    return currentBestTeam

def updateScores(team,points,scores):
    if team not in scores:
        scores[team]=0
    scores[team]+=points
---------------------------------------------------

# Coin Change
def nonConstructibleChange(coins):
    # Write your code here.
    coins.sort()
    currentChangeCreated=0

    for coin in coins:
        if coin>currentChangeCreated+1:
            return currentChangeCreated+1
        currentChangeCreated+=coin

    return currentChangeCreated+1
----------------------------------------------

# 3-Sum
def threeNumberSum(array, targetSum):
    # Write your code here.
    if len(array)<3:
        return(-1)
    array.sort()
    triplets=[]

    for i,a in enumerate(array):
        if i>0 and a==array[i-1]:
            continue
        left,right=i+1,len(array)-1
        while left<right:
            currentSum=a+array[left]+array[right]
            if currentSum>0:
                right-=1
            elif currentSum<0:
                left+=1
            else:
                triplets.append([a,array[left],array[right]])
                left+=1
                while array[left]==array[left-1] and left<right:
                    left+=1
    if len(triplets)<1:
        return -1
    else:
        return triplets
-------------------------------------------------------------

# Smallest Difference
def smallestDifference(arrayOne,arrayTwo):
    arrayOne.sort()
    arrayTwo.sort()
    idxOne=0
    idxTwo=0
    smallest=float("inf")
    current=float("inf")
    smallestPair=[]
    while idxOne<len(arrayOne) and idxTwo<len(arrayTwo):
        firstNum=arrayOne[idxOne]
        secondNum=arrayTwo[idxTwo]
        if firstNum<secondNum:
            current=secondNum-firstNum
            idxOne+=1
        elif secondNum<firstNum:
            current=firstNum-secondNum
            idxTwo+=1
        else:
            return [firstNum,secondNum]

        if smallest>current:
            smallest=current
            smallestPair=[firstNum,secondNum]
            
    return smallestPair
-----------------------------------------------

# Move elements to the end
def moveElementToEnd(array, toMove):
    i=0
    j=len(array)-1

    while i<j:
        while i<j and array[j]==toMove:
            j-=1
        if array[i]==toMove:
            array[i],array[j]=array[j],array[i]
        i+=1
    return array
----------------------------------------------

# Monotonic Array
def isMonotonic(array):
    increasing=False
    decreasing=False
    for i in range(1,len(array)):
        if array[i]==array[i-1]:
            i+=1
        if array[i]<array[i-1]:
            decreasing =True
        elif array[i]>array[i-1]:
            increasing=True
        if increasing==True and decreasing==True:
            return False
    return -1
------------------------------------------------

# Spiral Traverse
def spiralTraverse(array):
    result=[]
    startRow,endRow=0,len(array)-1
    startCol,endCol=0,len(array[0])-1
    while startRow<=endRow and startCol<=endCol:
        for col in range(startCol,endCol+1):
            result.append(array[startRow][col])
            
        for row in range(startRow+1,endRow+1):
            result.append(array[row][endCol])
            
        for col in reversed(range(startCol,endCol)):
            if startRow==endRow:
                break
            result.append(array[endRow][col])
            
        for row in reversed(range(startRow+1,endRow)):
            if startCol==endCol:
                break
            result.append(array[row][startCol])    
        startRow+=1
        endRow-=1
        startCol+=1
        endCol-=1
    return result
-----------------------------------------------

# Longest Peak
def longestPeak(array):
    lengthLongestPeak=0
    i=1
    while i<len(array)-1:
        isPeak= array[i-1]<array[i] and array[i]>array[i+1]
        if not isPeak:
            i+=1
            continue
        leftidx=i-2
        while leftidx>=0 and array[leftidx]<array[leftidx+1]:
            leftidx-=1
        rightidx=i+2
        while rightidx<len(array) and array[rightidx]<array[rightidx-1]:
            rightidx+=1
        
        currentPeakLength=rightidx-leftidx-1
        lengthLongestPeak=max(lengthLongestPeak,currentPeakLength)
        i=rightidx

    return lengthLongestPeak
--------------------------------------------------------

# Array of Products
def arrayOfProducts2(array):
    product=[1 for _ in array]
    leftArray=[1 for _ in array]
    
    leftRunningProduct=1
    for i in range(len(array)):
        leftArray[i]=leftRunningProduct
        leftRunningProduct*=array[i]
        
    rightRunningProduct=1   
    for i in reversed(range(len(array))):
        product[i]=leftArray[i]*  rightRunningProduct
        rightRunningProduct*=array[i]
    return product
------------------------------------------------------

# First Duplicate Value
def firstDuplicate2(array):
    for value in array:
        absValue=abs(value)
        if array[absValue-1]<0:
            return absValue
        array[absValue-1]*=-1
    return -1
------------------------------------------------------

# Merge Overlapping Intervals
def mergeOverlappingIntervals(intervals):
    intervals.sort(key=lambda x:x[0])
    output=[intervals[0]]
    for start,end in intervals[1:]:
        lastEnd=output[-1][1]
        if lastEnd>=start:
            output[-1][1]=max(lastEnd,end)
        else:
            output.append([start,end])        
    return output    
--------------------------------------------------------

# Zero Sum Subarray
def zeroSumSubarray(nums):
    seen=set([0])
    currentSum=0

    for i,num in enumerate(nums):
        currentSum+=num
        if currentSum in seen:
            return True
        else:
            seen.add(currentSum)
    return False
---------------------------------------------------------

# Four Number Sum
def fourSum(array,target):
    pairSum={}
    output=[]
    
    for i in range(1,len(array)-1):
        for j in range(i+1,len(array)):
            currentSum=array[i]+array[j]
            difference=target-currentSum
            if difference in pairSum:
                for pair in pairSum[difference]:
                    output.append(pair+[array[i],array[j]])
        for k in range(0,i):
            currentSum=array[i]+array[k]
            if currentSum not in pairSum:
                pairSum[currentSum]=[[array[k],array[i]]]
            else:
                pairSum[currentSum].append([array[k],array[i]])
    return output 
-----------------------------------------------------------

# Subarray Sort
def findUnsortedSubarray(array):
    if len(array) <= 1:
        return 0
    minOutOfOrder=float("inf")
    maxOutOfOrder=float("-inf")
    for i in range(len(array)):
        num=array[i]
        if isOutOfOrder(i,num,array):
            minOutOfOrder=min(minOutOfOrder,num)
            maxOutOfOrder=max(maxOutOfOrder,num)

    if minOutOfOrder==float("inf"):
        return 0
    leftidx=0
    while minOutOfOrder>=array[leftidx]:
        leftidx+=1
    rightidx=len(array)-1
    while maxOutOfOrder<=array[rightidx]:
        rightidx-=1

    return rightidx-leftidx+1

def isOutOfOrder(i,num,array):
    if i==0:
        return num>array[i+1]
    if i==len(array)-1:
        return num<array[i-1]
    return num<array[i-1] or num>array[i+1] 
-----------------------------------------------------

# Largest Range
def largestRange(array):
    output=[]
    longestLength=0
    nums={}
    
    for num in array:
        nums[num]=True
    for num in array:
        if not nums[num]:
            continue
        nums[num]:False
        currentLength=1
        left=num-1
        right=num+1
        while left in nums:
            nums[left]=False
            currentLength+=1
            left-=1
        while right in nums:
            nums[right]=False
            currentLength+=1
            right+=1
        if currentLength>longestLength:
            longestLength=currentLength
            output=[left+1,right-1]
    return output
------------------------------------------------

# Min Rewards
def minRewards(array):
    rewards=[1 for _ in array]
    for i in range(1,len(array)):
        if array[i]>array[i-1]:
            rewards[i]=rewards[i-1]+1
    for i in reversed(range(len(array)-1)):
        if array[i]>array[i+1]:
            rewards[i]=max(rewards[i],rewards[i+1]+1)
    return sum(rewards)
---------------------------------------------------

# Zigzag Traverse
def zigzagTraverse(array):
    height=len(array)-1
    width=len(array[0])-1
    result=[]
    row,col=0,0
    goingDown=True
    while not isOutOfBound(row,col,height,width):
        result.append(array[row][col])
        if goingDown:
            if col==0 or row==height:
                goingDown=False
                if row==height:
                    col+=1
                else:
                    row+=1
            else:
                row+=1
                col-=1
        else:
            if row==0 or col==width:
                goingDown=True
                if col==width:
                    row+=1    
                else:
                    col+=1
            else:
                row-=1
                col+=1
        
    return result
    
def isOutOfBound(row,col,height,width):
    return row<0 or row>height or col<0 or col>width  
----------------------------------------------------------

# Apartment Hunting¶
def apartmentHunting2(blocks,reqs):
    minDistanceFromBlocks=list(map(lambda req:getMinDistances(blocks,req), reqs))
#     [[1, 0, 0, 1, 2], [0, 1, 0, 0, 0], [4, 3, 2, 1, 0]]
    maxDistanceAtBlocks=getMaxValues(blocks, minDistanceFromBlocks)    
#     [4, 3, 2, 1, 2]
    
    return getIdx(maxDistanceAtBlocks)

# Helper Functions
def getMinDistances(blocks,req):
    minDistance=[0 for block in blocks]
    closestReqIdx=float("inf")
    for i in range(len(blocks)):
        if blocks[i][req]:
            closestReqIdx=i
        minDistance[i]=distanceBetween(i,closestReqIdx)
    for i in reversed(range(len(blocks))):
        if blocks[i][req]:
            closestReqIdx=i
        minDistance[i]=min(minDistance[i],distanceBetween(i,closestReqIdx))
    return minDistance 

def distanceBetween(a,b):
    return abs(a-b)

def getMaxValues(blocks, minDistanceFromBlocks):
    minDistancesAtBlocks=[0 for blocks in blocks]
    for i in range(len(blocks)):
        minDistancesAtBlock=list(map(lambda x:x[i],minDistanceFromBlocks))
#         [[1, 0, 4], [0, 1, 3], [0, 0, 2], [1, 0, 1], [2, 0, 0]]
        minDistancesAtBlocks[i]=max(minDistancesAtBlock)
#         [4, 3, 2, 1, 2]
    return minDistancesAtBlocks

def getIdx(array):
    idxAtMinValue=0
    minValue=float("inf")
    for i in range(len(array)):
        currentValue=array[i]
        if currentValue<minValue:
            minValue=min(minValue,currentValue)
            idxAtMinValue=i
    return idxAtMinValue
-----------------------------------------------------------------    

# Waterfall Streams
def waterfallStreams(array, source):
    rowAbove=array[0][:]
    rowAbove[source]= -1

    for row in range(1,len(array)):
        currentRow=array[row][:]

        for idx in range(len(rowAbove)):

            valueAbove=rowAbove[idx]

            hasWaterAbove=valueAbove<0
            hasBlock=currentRow[idx] ==1

            if not hasWaterAbove:
                continue

            if not hasBlock:
                currentRow[idx]+=valueAbove
                continue

            splitWater=valueAbove/2

            rightIdx=idx
            while rightIdx+1<len(rowAbove):
                rightIdx+=1
                if rowAbove[rightIdx]==1:
                    break
                if currentRow[rightIdx]!=1:
                    currentRow[rightIdx]+=splitWater
                    break

            leftIdx=idx
            while leftIdx-1>=0:
                leftIdx-=1
                if rowAbove[leftIdx]==1:
                    break
                if currentRow[leftIdx]!=1:
                    currentRow[leftIdx]+=splitWater
                    break

        rowAbove=currentRow

    finalPercentage=list(map(lambda num: num * -100, rowAbove ))

    return finalPercentage
------------------------------------------------------------------
