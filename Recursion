# Nth Fibonacci Number
# Naive (Recursive solution)
def nthfibonacci(n):
    if n==2:
        return 1
    elif n==1:
        return 0
    else:
        return nthfibonacci(n-1) + nthfibonacci(n-2)
        
# 2nd Approach
def nthfibonacci_num(n):
    dic={2:1,1:0}
    if n in dic:
        return dic[n]
    else:
        dic[n]=nthfibonacci_num(n-1) + nthfibonacci_num(n-2)
        return dic[n]
        
# 3rd Approach
def nthfibonacci_number(n):
    array=[0,1]
    num=2
    while num<=n:
        total=array[0]+array[1]
        array[0]=array[1]
        array[1]=total
        num+=1
    return array[1] if n>1 else array[0]
-------------------------------------------------------

#Product Sum
def productSum(array,m=1):
    totalSum=0
    for char in array:
        if type(char) is list:
            totalSum+=productSum(char,m+1)
        else:
            totalSum+=char
    return totalSum*m           
--------------------------------------------------------

# Permutations
def getpermutations(array):
    permutations=[]
    helperPermutations(0,array,permutations)
    return permutations

def helperPermutations(i,array,permutations):
    if i==len(array)-1:
        permutations.append(array[:])
    else:
        for j in range(i,len(array)):
            swap(array,i,j)
            helperPermutations(i+1,array,permutations)
            swap(array,i,j)
            
def swap(array,i,j):
    array[j],array[i]=array[i],array[j]
-----------------------------------------------------------   

# Power Set
def powerSet(array):
    subset=[[]]
    for ele in array:
        for i in range(len(subset)):
            currentSubset=subset[i]
            subset.append(currentSubset+[ele])
    return subset
-------------------------------------------------------------

# Phone Number Mnemonics
def phoneNumberMnemonics(phoneNumber):
    dic = {"0":"0","1":"1","2": "abc", "3": "def", "4": "ghi", "5": "jkl", 
                   "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
    currentNumber=['0'] * len(phoneNumber)
    found=[]
    helper(0,currentNumber,found,phoneNumber,dic)
    return found

def helper(idx,currentNumber,found,phoneNumber,dic):
    if idx==len(phoneNumber):
        mnuemonic="".join(currentNumber)
        found.append(mnuemonic)
    else:
        digit=phoneNumber[idx]
        letters=dic[digit]
        
        for letter in letters:
            currentNumber[idx]=letter
            helper(idx+1,currentNumber,found,phoneNumber,dic)
-------------------------------------------------------------            
