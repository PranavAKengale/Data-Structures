# Nth Fibonacci Number
# Naive (Recursive solution)
def nthfibonacci(n):
    if n==2:
        return 1
    elif n==1:
        return 0
    else:
        return nthfibonacci(n-1) + nthfibonacci(n-2)
        
# 2nd Approach
def nthfibonacci_num(n):
    dic={2:1,1:0}
    if n in dic:
        return dic[n]
    else:
        dic[n]=nthfibonacci_num(n-1) + nthfibonacci_num(n-2)
        return dic[n]
        
# 3rd Approach
def nthfibonacci_number(n):
    array=[0,1]
    num=2
    while num<=n:
        total=array[0]+array[1]
        array[0]=array[1]
        array[1]=total
        num+=1
    return array[1] if n>1 else array[0]
-------------------------------------------------------

#Product Sum
def productSum(array,m=1):
    totalSum=0
    for char in array:
        if type(char) is list:
            totalSum+=productSum(char,m+1)
        else:
            totalSum+=char
    return totalSum*m           
--------------------------------------------------------

# Permutations
def getpermutations(array):
    permutations=[]
    helperPermutations(0,array,permutations)
    return permutations

def helperPermutations(i,array,permutations):
    if i==len(array)-1:
        permutations.append(array[:])
    else:
        for j in range(i,len(array)):
            swap(array,i,j)
            helperPermutations(i+1,array,permutations)
            swap(array,i,j)
            
def swap(array,i,j):
    array[j],array[i]=array[i],array[j]
-----------------------------------------------------------   

# Power Set
def powerSet(array):
    subset=[[]]
    for ele in array:
        for i in range(len(subset)):
            currentSubset=subset[i]
            subset.append(currentSubset+[ele])
    return subset
-------------------------------------------------------------

# Phone Number Mnemonics
def phoneNumberMnemonics(phoneNumber):
    dic = {"0":"0","1":"1","2": "abc", "3": "def", "4": "ghi", "5": "jkl", 
                   "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"}
    currentNumber=['0'] * len(phoneNumber)
    found=[]
    helper(0,currentNumber,found,phoneNumber,dic)
    return found

def helper(idx,currentNumber,found,phoneNumber,dic):
    if idx==len(phoneNumber):
        mnuemonic="".join(currentNumber)
        found.append(mnuemonic)
    else:
        digit=phoneNumber[idx]
        letters=dic[digit]
        
        for letter in letters:
            currentNumber[idx]=letter
            helper(idx+1,currentNumber,found,phoneNumber,dic)
-------------------------------------------------------------  

# Lowest Common Ancestor of Binary Tree
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if root is None:
            return None
        if root==p or root==q:
            return root
        
        l=self.lowestCommonAncestor(root.left,p,q)
        r=self.lowestCommonAncestor(root.right,p,q)

        if l is not None and r is not None:
            return root
        else:
            return l or r
-----------------------------------------------------
# Lowest Common Ancestor in BST
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        currentNode=root
        while currentNode is not None:
            if p.val>currentNode.val and q.val>currentNode.val:
                currentNode=currentNode.right
            elif p.val<currentNode.val and q.val<currentNode.val:
                currentNode=currentNode.left
            else:
                return currentNode
---------------------------------------------------------------                
# Staircase Traversal
def staircase_slidingWindow(height,maxSteps):
    currentWaysToTop=0
    waysToTop=[1]

    for currentHeight in range(1,height+1):
        start=currentHeight-maxSteps-1
        end=currentHeight-1

        if start>=0:
            currentWaysToTop-=waysToTop[start]

        currentWaysToTop+=waysToTop[end]
        waysToTop.append(currentWaysToTop)
    return waysToTop[height]
-----------------------------------------------------------------
# Interweaving Strings
def interweavingStrings(one, two, three):
    if len(three)!= len(two)+len(one):
        return False
    cache=[[None for j in range(len(two)+1)] for i in range(len(one)+1)]
    return helper(one,two,three,0,0,cache)

def helper(one,two,three,i,j,cache):
    if cache[i][j] is not None:
        return cache[i][j]
    k=i+j
    if k==len(three):
        return True

    if i<len(one) and one[i]==three[k]:
        cache[i][j]=helper(one,two,three,i+1,j,cache)
        if cache[i][j]:
            return True
    if j<len(two) and two[j]==three[k]:
        cache[i][j]=helper(one,two,three,i,j+1,cache)
        return cache[i][j]

    cache[i][j]=False
    return False 
---------------------------------------------------------
# Soduku Solver
def solveSudoku(board):
    sudokuHelper(0,0,board)
    return board

def sudokuHelper(row,col,board):
    currentRow=row
    currentCol=col
    if currentCol==len(board[currentRow]):
        currentRow+=1
        currentCol=0
        if currentRow==len(board):
            return True
            
            
    if board[currentRow][currentCol]==0:
        return tryDigit(currentRow,currentCol,board)
    return sudokuHelper(currentRow,currentCol+1,board)

    
def tryDigit(row,col,board):
    for digit in range(1,10):
        if isValid(digit,row,col,board):
            board[row][col]=digit
            if sudokuHelper(row,col+1,board):
                return True
    board[row][col]=0
    return False


def isValid(value,row,col,board):
    rowIsValid= value not in board[row]
    colIsValid=value not in map(lambda r:r[col] , board)  
    if not rowIsValid or not colIsValid:
        return False
    rowSubGrid=row//3
    colSubGrid=col//3
    for row in range(3):
        for col in range(3):
            rowToCheck=rowSubGrid*3+row
            colToCheck=colSubGrid*3+col
            valueToCheck=board[rowToCheck][colToCheck]
            if value==valueToCheck:
                return False
    return True
-------------------------------------------------------------    
